pragma options "--bnd-inline-amnt 16 --bnd-inbits 2 --bnd-cbits 2 --bnd-unroll-amnt 16 --slv-nativeints";
int n = 20;
int k = 3;
//max degree of polynomials
int BASE = 4;

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::mult_proxy_real") n_unknowns}};
int mult_proxy_index(
	{{#each (range 20)}}int x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
	{{#each (range 20)}}int y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
);
int idx = 0;
{{#each (range 20)}}int[cap] x_{{@index}}_arr = { {{expand-to-arg-array (subtree @root.logs "ANONYMOUS::mult_proxy_real") @index "??(4)" @root.n_unknowns}} };
{{/each}}
{{#each (range 20)}}int[cap] y_{{@index}}_arr = { {{expand-to-arg-array (subtree @root.logs "ANONYMOUS::mult_proxy_real") (add @index 20) "??(4)" @root.n_unknowns}} };
{{/each}}
{{#each (range 40)}}int[cap] r_{{@index}}_arr = { {{expand-to-ith-rtn-array (subtree @root.logs "ANONYMOUS::mult_proxy_real") @index "??(4)" @root.n_unknowns}} };
{{/each}}

generator int[2*n] mult_proxy(
	{{#each (range 20)}}int x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
	{{#each (range 20)}}int y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
){
	idx = mult_proxy_index(
		{{#each (range 20)}}x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
		{{#each (range 20)}}y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
	);
	assume 0 <= idx && idx < cap
		{{#each (range 20)}}&& x_{{@index}} == x_{{@index}}_arr[idx]{{/each}}
		{{#each (range 20)}}&& y_{{@index}} == y_{{@index}}_arr[idx]{{/each}};
	return mult_proxy_real(
		{{#each (range 20)}}x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
		{{#each (range 20)}}y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
	);
}

int [2*n] mult_proxy_real (
	{{#each (range 20)}}int x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
	{{#each (range 20)}}int y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
) {
	return {
		{{#each (range 40)}}r_{{@index}}_arr[idx]{{#unless @last}},{{/unless}}{{/each}}
	};
}

//derivative computation for a polynomial represented by coefficient list
generator int[2*n] mult(int[n] x, int[n] y){
	return mult_proxy(
		{{#each (range 20)}}x[{{@index}}]{{#unless @last}},{{/unless}}{{/each}},
		{{#each (range 20)}}y[{{@index}}]{{#unless @last}},{{/unless}}{{/each}}
	);
}

harness void sanity_check(int idx1, int idx2) {
    assume 0 <= idx1 && idx1 < cap;
    assume 0 <= idx2 && idx2 < cap;
    assume idx1 != idx2;
	assert 
		{{#each (range 20)}}(x_{{@index}}_arr[idx1] != x_{{@index}}_arr[idx2]){{#unless @last}}||{{/unless}}{{/each}}||
		{{#each (range 20)}}(y_{{@index}}_arr[idx1] != y_{{@index}}_arr[idx2]){{#unless @last}}||{{/unless}}{{/each}};
}

int[n] toBase(int z){
	//write z in base BASE
	int[n] out =0;
	int sum =z;
	for (int i=0;i<n;i++){
		out[i] = sum % BASE;
		sum = sum/BASE;
	}
	return out;
}


harness void main(int p_0_0,int p_1_0,int p_2_0,int p_0_1,int p_1_1,int p_2_1,int p_0_2,int p_1_2,int p_2_2,int p_0_3,int p_1_3,int p_2_3,int p_0_4,int p_1_4,int p_2_4,int p_0_5,int p_1_5,int p_2_5,int p_0_6,int p_1_6,int p_2_6,int p_0_7,int p_1_7,int p_2_7,int p_0_8,int p_1_8,int p_2_8,int p_0_9,int p_1_9,int p_2_9,int p_0_10,int p_1_10,int p_2_10,int p_0_11,int p_1_11,int p_2_11,int p_0_12,int p_1_12,int p_2_12,int p_0_13,int p_1_13,int p_2_13,int p_0_14,int p_1_14,int p_2_14,int p_0_15,int p_1_15,int p_2_15,int p_0_16,int p_1_16,int p_2_16,int p_0_17,int p_1_17,int p_2_17,int p_0_18,int p_1_18,int p_2_18,int p_0_19,int p_1_19,int p_2_19){
	{{expand-x-d-points-to-assume c_e_s "p_0_0" "p_1_0" "p_2_0" "p_0_1" "p_1_1" "p_2_1" "p_0_2" "p_1_2" "p_2_2" "p_0_3" "p_1_3" "p_2_3" "p_0_4" "p_1_4" "p_2_4" "p_0_5" "p_1_5" "p_2_5" "p_0_6" "p_1_6" "p_2_6" "p_0_7" "p_1_7" "p_2_7" "p_0_8" "p_1_8" "p_2_8" "p_0_9" "p_1_9" "p_2_9" "p_0_10" "p_1_10" "p_2_10" "p_0_11" "p_1_11" "p_2_11" "p_0_12" "p_1_12" "p_2_12" "p_0_13" "p_1_13" "p_2_13" "p_0_14" "p_1_14" "p_2_14" "p_0_15" "p_1_15" "p_2_15" "p_0_16" "p_1_16" "p_2_16" "p_0_17" "p_1_17" "p_2_17" "p_0_18" "p_1_18" "p_2_18" "p_0_19" "p_1_19" "p_2_19" }}
    int[n][k] p = { { p_0_0, p_0_1, p_0_2, p_0_3, p_0_4, p_0_5, p_0_6, p_0_7, p_0_8, p_0_9, p_0_10, p_0_11, p_0_12, p_0_13, p_0_14, p_0_15, p_0_16, p_0_17, p_0_18, p_0_19 }, { p_1_0, p_1_1, p_1_2, p_1_3, p_1_4, p_1_5, p_1_6, p_1_7, p_1_8, p_1_9, p_1_10, p_1_11, p_1_12, p_1_13, p_1_14, p_1_15, p_1_16, p_1_17, p_1_18, p_1_19 }, { p_2_0, p_2_1, p_2_2, p_2_3, p_2_4, p_2_5, p_2_6, p_2_7, p_2_8, p_2_9, p_2_10, p_2_11, p_2_12, p_2_13, p_2_14, p_2_15, p_2_16, p_2_17, p_2_18, p_2_19 } };

	int[2*n][k] out1 = 0;
	for(int i=0;i<k-1;i++){
		out1[i] = mult(toBase(i+1),p[i+1]);
	}
	int[2*n][k] out2 = 0;
	for(int i=??;{|i  (< | <= | > | >=) (??*k (+ | -) ??) |};i++){
		out2[i] = mult(p[{| ??*i (+ | -) ?? |}],toBase({| ??*i (+ | -) ?? |}));
	}

	assert(out1 == out2);
}
