pragma options "--bnd-inbits 4 --bnd-unroll-amnt 16 --bnd-cbits 3  --slv-parallel --slv-p-cpus 4 --slv-randassign --slv-randdegree 5";
int N = 5;

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::gcd_real") n_unknowns}};
int gcd_index(int a, int b);
int idx = 0;
int[cap] i_0_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::gcd_real") 0 "??" n_unknowns}} };
int[cap] i_1_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::gcd_real") 1 "??" n_unknowns}} };
int[cap] rarr = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::gcd_real") "??" n_unknowns}} };

generator int gcd(int a, int b){
  idx = gcd_index(a, b);
  assume 0 <= idx && idx < cap && i_0_arr[idx] == a && i_1_arr[idx] == b;
  return gcd_real(a, b);
}

int gcd_real(int a, int b) {
  return rarr[idx];
}

harness void sanity_check(int idx1, int idx2) {
    assume 0 <= idx1 && idx1 < cap;
    assume 0 <= idx2 && idx2 < cap;
    assume idx1 != idx2;
	assert (i_0_arr[idx1] != i_0_arr[idx2]) || (i_1_arr[idx1] != i_1_arr[idx2]);
}

// synthesize algorithm for computing gcd of N numbers
harness void multi_gcd(int nums_0, int nums_1, int nums_2, int nums_3, int nums_4){
    {{expand-x-d-points-to-assume c_e_s "nums_0" "nums_1" "nums_2" "nums_3" "nums_4"}}
    int[N] nums;
    nums[0] = nums_0;
    nums[1] = nums_1;
    nums[2] = nums_2;
    nums[3] = nums_3;
    nums[4] = nums_4;
	
	for(int i=0; i<N; i++)
	  if(nums[i] == 0) return;	
	if(N<2) return;        

	int result = gcd(nums[0], nums[1]);
	for(int i =??; i<{| N | N-1 | N-2 |}; i++){
	  result = gcd({| result | nums[i]|}, {| result | nums[i]|});
	}


	for(int i=0; i<N; i++)
	 assert nums[i] % result== 0;
	
	for(int i=result+1; i <= nums[0]; i++)
	 {
	  bit divisible = 1;
	  for(int j=0; j<N; j++)
             divisible = divisible && (nums[j] %i == 0);
      assert !divisible;
	 }

}