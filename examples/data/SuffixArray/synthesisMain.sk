pragma options "--bnd-inbits 3 --bnd-cbits 5 --bnd-unroll-amnt 32 --slv-nativeints";
struct Array_bit {
    int length;
    bit[length] A;
}

struct Array_char {
    int length;
    char[length] A;
}

struct Array_int {
    int length;
    int[length] A;
}

struct Array_float {
    int length;
    float[length] A;
}

struct Array_double {
    int length;
    double[length] A;
}struct String {
    Array_char _value;
    int _count;
}

struct Array_String {
    int length;
    String[length] A;
}

String String_From_bytes_offset(Array_char ca, int offset, int count) {
    String self = new String();
    if (offset > 0 && offset < ca.length) {
        Array_char tmp = new Array_char(length=count);
        for (int i = 0; i < count; i++) {
            tmp.A[i] = ca.A[i + offset];
        }
        self._value = tmp;
    }
    else {
        self._value = ca;
    }
    self._count = count;
    return self;
}

String String_From_bytes(Array_char bytes) {
    String self = new String();
    int len = bytes.length;
    self._value = new Array_char(length=len);
    for (int i = 0; i < len; i++) {
        self._value.A[i] = (char)(bytes.A[i]);
    }
    self._count = len;
    return self;
}

String String_From_cbytes(Array_char bytes) {
    String self = new String();
    int len = bytes.length - 1; // Excluding '\0' at the end of the cstring
    self._value = new Array_char(length=len);
    for (int i = 0; i < len; i++) {
        self._value.A[i] = (char)(bytes.A[i]);
    }
    self._count = len;
    return self;
}

char String_charAt(String self, int index) {
    if (0 <= index && index < self._count) return self._value.A[index];
    return '\0';
}

int String_length(String self) {
    return self._count;
}

void String_setCharAt(String self, int i, char c) {
    self._value.A[i] = c;
}

int String_indexOf_String(String self, String s) {
    return String_indexOf_String_offset(self, s, 0);
}

int String_indexOf_String_offset(String self, String s, int i) {
    int tLen = String_length(self);
    int sLen = String_length(s);
    int index = i;
    int mLen = 0;
    int j;
    if (i >= tLen || i < 0 || sLen == 0) {
        return -1;
    }
    for (j = i; (j < tLen) && (mLen < sLen) && ((j - index) < sLen); ) {
        if (String_charAt(self, j) != String_charAt(s, j - index)) {
            mLen = 0;
            index++;
            j = index;
        }
        else {
            mLen++;
            j++;
        }
    }
    if (mLen != sLen) {
        index = -1;
    }
    return index;
}

int String_indexOf_char(String self, char c) {
    return String_indexOf_char_offset(self, c, 0);
}

int String_indexOf_char_offset(String self, char c, int i) {
    int len = String_length(self);
    int index = -1;
    if (i >= len || i < 0) {
        return index;
    }
    for (int j = i; j < len; j++) {
        if (String_charAt(self, j) == c) {
            return j;
        }
    }
    return index;
}

int String_compareTo(String self, String str) {
    return String_compare(self, str);
}

int String_compare(String s1, String s2) {
    int l1 = String_length(s1);
    int l2 = String_length(s2);
    int lendiff = l1 - l2;
    int smaller = l1;
    if (l1 > l2) {
        smaller = l2;
    }
    else {
        for (int i = 0; i < smaller; i++) {
            char c1 = String_charAt(s1, i);
            char c2 = String_charAt(s2, i);
            if (c1 != c2) {
                return c1 - c2;
            }
        }
        if (lendiff != 0) return lendiff;
        return 0;
    }
}

String String_concat(String self, String str) {
    int otherLen = String_length(str);
    if (otherLen == 0) {
        return self;
    }
    int thisLen = String_length(self);
    int totalLen = thisLen + otherLen;
    Array_char ret = new Array_char(length=totalLen);
    for (int i = 0; i < thisLen; i++) {
        ret.A[i] = String_charAt(self, i);
    }
    for (int i = thisLen; i < totalLen; i++) {
        ret.A[i] = String_charAt(str, i-thisLen);
    }
    return String_From_bytes_offset(ret, 0, totalLen);
}

bit String_equalsIgnoreCase(String self, String str) {
    return String_equals(self, str);
}

bit String_equals(String self, String s) {
    bit isEqual = true;
    int sLen = String_length(s);
    int tLen = String_length(self);
    if (sLen != tLen) isEqual = false;
    for (int i = 0; (i < sLen) && (isEqual == true); i++) {
        if (s._value.A[i] != self._value.A[i]) {
            isEqual = false;
        }
    }
    return isEqual;
}

//int String_hashCode(String self) {
//    int n = self._count,  hash = 0,  temp = 0;
//    if (n == 0) {
//        return 0;
//    }
//    for (int i = 0; i < n; i++) {
//        temp = String_charAt(self, i);
//        for (int j = 0; j < n - 1 - i; j++) {
//            temp = (temp * 31) % 65521;
//        }
//        hash = (hash + temp) % 65521;
//    }
//    return hash;
//}

String replace_char_char(String self, char oldChar, char newChar) {
    if (oldChar != newChar) {
        int len = self._count;
        int i = -1;
        int stop = 0;
        Array_char val = self._value;
        while (i < len) {
            i = i + 1;
            if (val.A[i] == oldChar && stop == 0) {
                stop = i;
            }
        }
        if (stop < len) {
            Array_char buf = new Array_char(length=len);
            for (int j = 0; j < stop; j++) {
                buf.A[j] = val.A[j];
            }
            while (stop < len) {
                char c = val.A[stop];
                buf.A[stop] = ((c == oldChar) ? newChar : c);
                stop++;
            }
            return String_From_bytes_offset(buf, 0, len);
        }
    }
    return self;
}

Array_char String_getBytes(String str) {
    int len = String_length(str);
    Array_char bytes = new Array_char(length=len);
    for (int i = 0; i < len; i++) {
        bytes.A[i] = (char)String_charAt(str, i);
    }
    return bytes;
}

String String_substring_to_end(String self, int beginIndex) {
    int subLen = self._count - beginIndex;
    assert subLen > 0;
    return String_From_bytes_offset(self._value, beginIndex, subLen);
}

String String_substring(String self, int beginIndex, int endIndex) {
    assert beginIndex >= 0 && endIndex <= self._value.length;
    int subLen = endIndex - beginIndex;
    assert subLen > 0;
    return String_From_bytes_offset(self._value, beginIndex, subLen);
}

int String_hashCode(String str) {
if (String_length(str) == 0) return 0;
if (String_charAt(str, 0) == 'a') {
 if (String_length(str) == 1) return 1;
 if (String_charAt(str, 1) == 'a') {
  if (String_length(str) == 2) return 2;
  if (String_charAt(str, 2) == 'a') {
   if (String_length(str) == 3) return 3;
   if (String_charAt(str, 3) == 'b') {
    if (String_length(str) == 4) return 4;
   }
  }
  if (String_charAt(str, 2) == 'b') {
   if (String_length(str) == 3) return 5;
   if (String_charAt(str, 3) == 'a') {
    if (String_length(str) == 4) return 6;
    if (String_charAt(str, 4) == 'a') {
     if (String_length(str) == 5) return 7;
     if (String_charAt(str, 5) == 'b') {
      if (String_length(str) == 6) return 8;
     }
    }
   }
  }
 }
 if (String_charAt(str, 1) == 'b') {
  if (String_length(str) == 2) return 9;
  if (String_charAt(str, 2) == 'c') {
   if (String_length(str) == 3) return 10;
   if (String_charAt(str, 3) == 'c') {
    if (String_length(str) == 4) return 11;
    if (String_charAt(str, 4) == 'd') {
     if (String_length(str) == 5) return 12;
     if (String_charAt(str, 5) == 'd') {
      if (String_length(str) == 6) return 13;
     }
    }
   }
   if (String_charAt(str, 3) == 'b') {
    if (String_length(str) == 4) return 14;
    if (String_charAt(str, 4) == 'a') {
     if (String_length(str) == 5) return 15;
    }
   }
  }
  if (String_charAt(str, 2) == 'a') {
   if (String_length(str) == 3) return 16;
   if (String_charAt(str, 3) == 'a') {
    if (String_length(str) == 4) return 17;
    if (String_charAt(str, 4) == 'b') {
     if (String_length(str) == 5) return 18;
    }
   }
   if (String_charAt(str, 3) == 'b') {
    if (String_length(str) == 4) return 19;
    if (String_charAt(str, 4) == 'a') {
     if (String_length(str) == 5) return 20;
     if (String_charAt(str, 5) == 'b') {
      if (String_length(str) == 6) return 21;
      if (String_charAt(str, 6) == 'a') {
       if (String_length(str) == 7) return 22;
      }
     }
    }
   }
  }
 }
}
if (String_charAt(str, 0) == 'b') {
 if (String_length(str) == 1) return 23;
 if (String_charAt(str, 1) == 'c') {
  if (String_length(str) == 2) return 24;
  if (String_charAt(str, 2) == 'c') {
   if (String_length(str) == 3) return 25;
   if (String_charAt(str, 3) == 'd') {
    if (String_length(str) == 4) return 26;
    if (String_charAt(str, 4) == 'd') {
     if (String_length(str) == 5) return 27;
    }
   }
  }
  if (String_charAt(str, 2) == 'b') {
   if (String_length(str) == 3) return 28;
   if (String_charAt(str, 3) == 'a') {
    if (String_length(str) == 4) return 29;
   }
  }
 }
 if (String_charAt(str, 1) == 'a') {
  if (String_length(str) == 2) return 30;
  if (String_charAt(str, 2) == 'a') {
   if (String_length(str) == 3) return 31;
   if (String_charAt(str, 3) == 'b') {
    if (String_length(str) == 4) return 32;
   }
  }
  if (String_charAt(str, 2) == 'b') {
   if (String_length(str) == 3) return 33;
   if (String_charAt(str, 3) == 'a') {
    if (String_length(str) == 4) return 34;
    if (String_charAt(str, 4) == 'b') {
     if (String_length(str) == 5) return 35;
     if (String_charAt(str, 5) == 'a') {
      if (String_length(str) == 6) return 36;
      if (String_charAt(str, 6) == 'b') {
       if (String_length(str) == 7) return 37;
       if (String_charAt(str, 7) == 'a') {
        if (String_length(str) == 8) return 38;
       }
      }
     }
    }
   }
  }
 }
}
if (String_charAt(str, 0) == 'c') {
 if (String_length(str) == 1) return 39;
 if (String_charAt(str, 1) == 'c') {
  if (String_length(str) == 2) return 40;
  if (String_charAt(str, 2) == 'd') {
   if (String_length(str) == 3) return 41;
   if (String_charAt(str, 3) == 'd') {
    if (String_length(str) == 4) return 42;
   }
  }
 }
 if (String_charAt(str, 1) == 'd') {
  if (String_length(str) == 2) return 43;
  if (String_charAt(str, 2) == 'd') {
   if (String_length(str) == 3) return 44;
  }
 }
 if (String_charAt(str, 1) == 'b') {
  if (String_length(str) == 2) return 45;
  if (String_charAt(str, 2) == 'a') {
   if (String_length(str) == 3) return 46;
  }
 }
}
if (String_charAt(str, 0) == 'd') {
 if (String_length(str) == 1) return 47;
 if (String_charAt(str, 1) == 'd') {
  if (String_length(str) == 2) return 48;
 }
}
return -1;

}
struct TwoDArray {
    int N;
    int M;
    Array_int arr;
}


TwoDArray TwoDArray_init(int n, int m) {
    TwoDArray self = new TwoDArray();
    self.N = n;
    self.M = m;
    self.arr = new Array_int(length=n * m);
    return self;
}

void TwoDArray_set(TwoDArray self, int i, int j, int val) {
    self.arr.A[(i * self.M) + j] = val;
}

int TwoDArray_get(TwoDArray self, int i, int j) {
    return self.arr.A[(i * self.M) + j];
}

void TwoDArray_setRow(TwoDArray self, int i, Array_int row) {
    int count = 0;
    for (int j = i * self.M; j < (i * self.M) + self.M; j++) {
        self.arr.A[j] = row.A[count];
        count++;
    }
}

Array_int TwoDArray_getRow(TwoDArray self, int i) {
    int count = 0;
    Array_int row = new Array_int(length=self.M);
    for (int j = i * self.M; j < (i * self.M) + self.M; j++) {
        row.A[count] = self.arr.A[j];
        count++;
    }
    return row;
}

struct SuffixRankTuple {
    int firstHalf;
    int secondHalf;
    int originalIndex;
}

struct Array_SuffixRankTuple {
    int length;
    SuffixRankTuple[length] A;
}

int SuffixRankTuple_compareTo(SuffixRankTuple self, SuffixRankTuple other) {
    int cmp = (self.firstHalf < other.firstHalf ? -1 : (self.firstHalf == other.firstHalf)? 0 : 1);
    if (cmp == 0) cmp = (self.secondHalf < other.secondHalf ? -1 : (self.secondHalf == other.secondHalf)? 0 : 1);
    if (cmp == 0) return (self.originalIndex < other.originalIndex ? -1 : (self.originalIndex == other.originalIndex)? 0 : 1);
    return cmp;
}

Array_SuffixRankTuple sort_SuffixRankTuple(Array_SuffixRankTuple a, int n) {
    for (int j = 0; j < n - 1; j++) {
        int iMin = j;
        for (int i = j + 1; i < n; i++) {
            SuffixRankTuple a1 = a.A[i];
            SuffixRankTuple a2 = a.A[iMin];
            int cmp = SuffixRankTuple_compareTo(a1, a2);
            if (cmp < 0) {
                iMin = i;
            }
        }
        if (iMin != j) {
            SuffixRankTuple tmp = a.A[j];
            a.A[j] = a.A[iMin];
            a.A[iMin] = tmp;
        }
    }
    return a;
}

int HIST_CAP = {{ hist_cap }};
struct TreeSet {
    Array_String set;
    int capacity;
    int size;
    int[HIST_CAP] _hist;
    int _hist_len;
}

int TreeSet_INITIAL_CAPACITY = 16;
int TreeSet_RESIZE_FACTOR = 2;

TreeSet TreeSet_init() {
    TreeSet self = new TreeSet();
    self.set = new Array_String(length=TreeSet_INITIAL_CAPACITY);
    self.size = 0;
    self.capacity = TreeSet_INITIAL_CAPACITY;

    self._hist[0] = {{ subtree func_hist_codes "ANONYMOUS::TreeSet_init" }};
    self._hist_len = 1;

    return self;
}

int cap_add = {{get-cap-logs (subtree logs "ANONYMOUS::TreeSet_add_real") n_unknowns}};
int TreeSet_add_index(int[HIST_CAP] hist);
int idx_add = 0;
int[HIST_CAP][cap_add] hist_add = { {{expand-to-full-hist-arrays (subtree logs "ANONYMOUS::TreeSet_add_real") n_unknowns hist_cap "??" }} };
int[cap_add] hist_add_len = { {{expand-to-hist-lens (subtree logs "ANONYMOUS::TreeSet_add_real") n_unknowns }}  };
int[cap_add] rarr_add = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::TreeSet_add_real") "??" n_unknowns}} };

generator int TreeSet_add(TreeSet self, String s) {
    int i = String_hashCode(s);
    if (self._hist_len > 0) {
        self._hist[1::self._hist_len] = self._hist[0::self._hist_len];
    }
    self._hist[0] = {{ subtree func_hist_codes "ANONYMOUS::TreeSet_add_real" }};
    self._hist[self._hist_len + 1] = i;
    self._hist_len = self._hist_len + 2;

    idx_add = TreeSet_add_index(self._hist);
    assume 0 <= idx_add;
    assume idx_add < cap_add;
    assume hist_add_len[idx_add] == self._hist_len;
    assume hist_add[idx_add][0::self._hist_len] == self._hist[0::self._hist_len];
    return TreeSet_add_real(self, s);
}

int TreeSet_add_real(TreeSet self, String s) {
    return rarr_add[idx_add];
}

int cap_contains = {{get-cap-logs (subtree logs "ANONYMOUS::TreeSet_contains_real") n_unknowns}};
int TreeSet_contains_index(int[HIST_CAP] hist);
int idx_contains = 0;
int[HIST_CAP][cap_contains] hist_contains = { {{expand-to-full-hist-arrays (subtree logs "ANONYMOUS::TreeSet_contains_real") n_unknowns hist_cap "??" }} };
int[cap_contains] hist_contains_len = { {{expand-to-hist-lens (subtree logs "ANONYMOUS::TreeSet_contains_real") n_unknowns }}  };
int[cap_contains] rarr_contains = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::TreeSet_contains_real") "??" n_unknowns}} };

generator int TreeSet_contains(TreeSet self, String s) {
    int i = String_hashCode(s);
    int[HIST_CAP] query_hist;
    query_hist[0::self._hist_len] = self._hist[0::self._hist_len];
    query_hist[self._hist_len] = i;
    int query_hist_len = self._hist_len + 1;

    idx_contains = TreeSet_contains_index(query_hist);
    assume 0 <= idx_contains;
    assume idx_contains < cap_contains;
    assume hist_contains_len[idx_contains] == query_hist_len;
    assume hist_contains[idx_contains][0::query_hist_len] == query_hist[0::query_hist_len];
    return TreeSet_contains_real(self, s);
}

int TreeSet_contains_real(TreeSet self, String s) {
    return rarr_contains[idx_contains];
}

void TreeSet_clear(TreeSet self) {
    if (self._hist_len > 0) {
        self._hist[1::self._hist_len] = self._hist[0::self._hist_len];
    }
    self._hist[0] = {{ subtree func_hist_codes "ANONYMOUS::TreeSet_clear_real" }};
    self._hist_len = self._hist_len + 1;

    TreeSet_clear_real(self);
}

int TreeSet_clear_real(TreeSet self) {
    return 0;
}

int cap_size = {{get-cap-logs (subtree logs "ANONYMOUS::TreeSet_size_real") n_unknowns}};
int TreeSet_size_index(int[HIST_CAP] hist);
int idx_size = 0;
int[HIST_CAP][cap_size] hist_size = { {{expand-to-full-hist-arrays (subtree logs "ANONYMOUS::TreeSet_size_real") n_unknowns hist_cap "??"}} };
int[cap_size] hist_size_len = { {{expand-to-hist-lens (subtree logs "ANONYMOUS::TreeSet_size_real") n_unknowns }}  };
int[cap_size] rarr_size = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::TreeSet_size_real") "??" n_unknowns}} };

generator int TreeSet_size(TreeSet self) {
    idx_size = TreeSet_size_index(self._hist);
    assume 0 <= idx_size;
    assume idx_size < cap_size;
    assume hist_size_len[idx_size] == self._hist_len;
    assume hist_size[idx_size][0::self._hist_len] == self._hist[0::self._hist_len];
    return TreeSet_size_real(self);
}

int TreeSet_size_real(TreeSet self) {
    return rarr_size[idx_size];
}

harness void sanity_check(
    int idx1_add, int idx2_add,
    int idx1_contains, int idx2_contains,
    int idx1_size, int idx2_size
    ) {
    assume 0 <= idx1_add && idx1_add < cap_add;
    assume 0 <= idx2_add && idx2_add < cap_add;
    assume idx1_add != idx2_add;
    assert hist_add_len[idx1_add] != hist_add_len[idx2_add]
        || ( hist_add_len[idx1_add] < HIST_CAP
            && hist_add_len[idx1_add] >= 0
            && hist_add[idx1_add][0::hist_add_len[idx1_add]] != hist_add[idx2_add][0::hist_add_len[idx1_add]]);

    assume 0 <= idx1_contains && idx1_contains < cap_contains;
    assume 0 <= idx2_contains && idx2_contains < cap_contains;
    assume idx1_contains != idx2_contains;
    assert hist_contains_len[idx1_contains] != hist_contains_len[idx2_contains]
        || ( hist_contains_len[idx1_contains] < HIST_CAP
            && hist_contains_len[idx1_contains] >= 0
            && hist_contains[idx1_contains][0::hist_contains_len[idx1_contains]] != hist_contains[idx2_contains][0::hist_contains_len[idx1_contains]]);

    assume 0 <= idx1_size && idx1_size < cap_size;
    assume 0 <= idx2_size && idx2_size < cap_size;
    assume idx1_size != idx2_size;
    assert hist_size_len[idx1_size] != hist_size_len[idx2_size]
        || ( hist_size_len[idx1_size] < HIST_CAP
            && hist_size_len[idx1_size] >= 0
            && hist_size[idx1_size][0::hist_size_len[idx1_size]] != hist_size[idx2_size][0::hist_size_len[idx1_size]]);

}
struct SuffixArray {
    int N;
    Array_int T;
    Array_int sa;
    Array_int lcp;
}

Array_int clone_int(Array_int arr) {
    int l = arr.length;
    Array_int arr_cp = new Array_int(length=l);
    for (int i = 0; i < l; i++) {
        arr_cp.A[i] = arr.A[i];
    }
    return arr_cp;
}


String intArrToString(Array_int text) {
    Array_char tmp = new Array_char(length=text.length);
    for (int i = 0; i < text.length; i++) {
        tmp.A[i] = (char)text.A[i];
    }
    return String_From_bytes_offset(tmp, 0, text.length);
}

Array_int StringtoIntArray(String s) {
    Array_int text = new Array_int(length=String_length(s));
    for (int i = 0; i < String_length(s); i++) text.A[i] = String_charAt(s, i);
    return text;
}

SuffixArray SuffixArray_From_String(String text) {
    return SuffixArray_From_Int(StringtoIntArray(text));
}

SuffixArray SuffixArray_From_Int(Array_int text) {
    SuffixArray self = new SuffixArray();
    self.T = clone_int(text);
    self.N = text.length;
    SuffixArray_construct(self);
    SuffixArray_kasai(self);
    return self;
}

void SuffixArray_construct(SuffixArray self) {
    self.sa = new Array_int(length=self.N);
    TwoDArray suffixRanks = TwoDArray_init(2, self.N);
    Array_SuffixRankTuple ranks = new Array_SuffixRankTuple(length = self.N);
    for (int i = 0; i < self.N; i++) {
        TwoDArray_set(suffixRanks, 0, i, self.T.A[i]);
        ranks.A[i] = new SuffixRankTuple();
    }
    for (int pos = 1; pos < self.N; pos = pos * 2) {
        for (int i = 0; i < self.N; i++) {
            SuffixRankTuple suffixRank = ranks.A[i];
            suffixRank.firstHalf = TwoDArray_get(suffixRanks, 0, i);
            suffixRank.secondHalf = i + pos < self.N ? TwoDArray_get(suffixRanks, 0, i + pos) : -1;
            suffixRank.originalIndex = i;
        }
        ranks = sort_SuffixRankTuple(ranks, ranks.length);
        int newRank = 0;
        TwoDArray_set(suffixRanks, 1, ranks.A[0].originalIndex, 0);
        for (int i = 1; i < self.N; i++) {
            SuffixRankTuple lastSuffixRank = ranks.A[i - 1];
            SuffixRankTuple currSuffixRank = ranks.A[i];
            if (currSuffixRank.firstHalf != lastSuffixRank.firstHalf
                || currSuffixRank.secondHalf != lastSuffixRank.secondHalf)
                newRank++;
            TwoDArray_set(suffixRanks, 1, currSuffixRank.originalIndex, newRank);
        }
        TwoDArray_setRow(suffixRanks, 0, TwoDArray_getRow(suffixRanks, 1));
        if (newRank == self.N - 1) pos = self.N;
    }
    for (int i = 0; i < self.N; i++) {
        self.sa.A[i] = ranks.A[i].originalIndex;
        ranks.A[i] = null;
    }
    suffixRanks = null;
    ranks = null;
}

void SuffixArray_kasai(SuffixArray self) {
    self.lcp = new Array_int(length=self.N);
    Array_int inv = new Array_int(length=self.N);
    for (int i = 0; i < self.N; i++)
        inv.A[self.sa.A[i]] = i;
    int len = 0;
    for (int i = 0; i < self.N; i++) {
        if (inv.A[i] > 0) {
            int k = self.sa.A[inv.A[i] - 1];
            while ((i + len < self.N) && (k + len < self.N) && self.T.A[i + len] == self.T.A[k + len]) len++;
            self.lcp.A[inv.A[i] - 1] = len;
            if (len > 0) len--;
        }
    }
}

generator TreeSet SuffixArray_lrs(SuffixArray self) {
    int max_len = 0;
    TreeSet lrss = TreeSet_init();
    Array_char tmp = new Array_char(length=self.T.length);

    for (int i = 0; i < self.T.length; i++) {
        tmp.A[i] = (char) self.T.A[i];
    }

    for (int i = 0; i < self.N; i++) {
        //if (self.lcp.A[i] > 0 && self.lcp.A[i] >= max_len) {
        int cur_len = self.lcp.A[i];
        if ( {|  cur_len (< | > | <= | >=)  (max_len | 0) |} && {| cur_len (< | > | <= | >=)  (max_len | 0) |} ) {
            //if (self.lcp.A[i] > max_len) {
            if ({| cur_len (< | > | <= | >=)  (max_len | 0) |}) {
                TreeSet_clear(lrss);
            }
            max_len = cur_len;
            TreeSet_add(lrss, String_From_bytes_offset(tmp, self.sa.A[i], max_len));
        }
    }

    return lrss;
}
harness void main(int choice) {
    {{expand-points-to-assume c_e_s.[0] "choice"}}
    String s;
    if (choice == 0) {
        s = String_From_cbytes(new Array_char(length=7, A="aabaab"));
    } else if (choice == 1) {
        s = String_From_cbytes(new Array_char(length=9, A="babababa"));
    } else if (choice == 2) {
        s = String_From_cbytes(new Array_char(length=6, A="abcba"));
    } else if (choice == 3) {
        s = String_From_cbytes(new Array_char(length=7, A="abccdd"));
    } else if (choice == 4) {
        s = String_From_cbytes(new Array_char(length=5, A="aaab"));
    } else if (choice == 5) {
        s = String_From_cbytes(new Array_char(length=6, A="ababa"));
    } else {
        return;
    }

    SuffixArray sa = SuffixArray_From_String(s);
    TreeSet lrss = SuffixArray_lrs(sa);

    int size;
    int flag;
    if (choice == 0) {
        size = TreeSet_size(lrss);
        assert size == 1;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=4, A="aab")));
        assert flag == 1;
    } else if (choice == 1) {
        size = TreeSet_size(lrss);
        assert size == 1;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=7, A="bababa")));
        assert flag == 1;
    } else if (choice == 2) {
        size = TreeSet_size(lrss);
        assert size == 2;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=2, A="a")));
        assert flag == 1;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=2, A="b")));
        assert flag == 1;
    } else if (choice == 3) {
        size = TreeSet_size(lrss);
        assert size == 2;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=2, A="c")));
        assert flag == 1;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=2, A="d")));
        assert flag == 1;
    } else if (choice == 4) {
        size = TreeSet_size(lrss);
        assert size == 1;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=3, A="aa")));
        assert flag == 1;
    } else if (choice == 5) {
        size = TreeSet_size(lrss);
        assert size == 1;
        flag = TreeSet_contains(lrss, String_From_cbytes(new Array_char(length=4, A="aba")));
        assert flag == 1;
    }
    
}