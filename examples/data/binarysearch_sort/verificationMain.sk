pragma options "--bnd-inline-amnt 5 --bnd-inbits 3 --bnd-cbits 3 --slv-nativeints --bnd-unroll-amnt 16";
int N =5;

int[N] sort(int[N] input){
    return sort_proxy(input[0],input[1],input[2],input[3],input[4]);
}
int[N] sort_proxy(int input_0,int input_1,int input_2,int input_3,int input_4) {
   int[N] input = {input_0,input_1,input_2,input_3,input_4};
   int[N] output=input;
   int[N] done = 0;
   int k=0;
   for(int i=0; i<N; ++i){
      for(int j=i+1; j<N; ++j){
         if( output[j]< output[i]){
            int tmp = output[j];
            output[j] = output[i];
            output[i] = tmp;
         }
      }
   }
   return output;
}

int linear_search(int[N] arr,int x){
	for(int i=0;i<N;i++){
		if(arr[i] == x) return i;
	}
	return -1;
}
harness void main(int arr_0,int arr_1,int arr_2,int arr_3,int arr_4,int x){//search for x in arr

    int[N] arr = {arr_0,arr_1,arr_2,arr_3,arr_4};
	int[N] sarr = sort(arr);
	//assert(sarr[0] <= sarr[N-1]);
	int exists = linear_search(sarr,x);
	int imin =0;
	int imax= N - 1;
	int found = -1;
	while (found == -1 && {| (imin | N | imax) ( < | <= | > |>=) (imin | N | imax) |})
	//while (imax >= imin && found == -1)
    {
	  	int imid = (imin + imax)/2;
		if(sarr[imid] <  x){
			if(??)
				imin = {| (imin | N | imax | imid) ( + | -) ?? |};
			else
				imax = {| (imin | N | imax | imid) ( + | -) ?? |};
		}
		else if (sarr[imid] > x){
			if(??)
				imin = {| (imin | N | imax | imid) ( + | -) ?? |};
			else
				imax = {| (imin | N | imax | imid) ( + | -) ?? |};
		}
		else
			found = imid;
			
    }
    if(exists == -1) 
    	assert(found == -1);
	else
		assert(sarr[exists] == sarr[found] && sarr[found] == x);
}