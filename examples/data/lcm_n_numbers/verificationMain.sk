pragma options "--bnd-inbits 3 --bnd-unroll-amnt 64 --bnd-cbits 3 --slv-nativeints";
int N = 5;

int lcm(int a, int b){
 return a * b / gcd(a,b);
}

int gcd(int a, int b){
if(a==0) return b;
while(b != 0){
 if(a>b) a = a - b;
 else b = b - a;
}
return a;
}

// synthesize algorithm for computing gcd of N numbers
harness void multi_lcm(int nums_0, int nums_1, int nums_2, int nums_3, int nums_4){
    int[N] nums;
    nums[0] = nums_0;
    nums[1] = nums_1;
    nums[2] = nums_2;
    nums[3] = nums_3;
    nums[4] = nums_4;
	
	for(int i=0; i<N; i++)
	  if(nums[i] == 0) return;	
	if(N<2) return;        

	int result = lcm(nums[0], nums[1]);
	for(int i =??; i<{| N | N-1 | N-2 |}; i++){
	  result = lcm({| result | nums[i]|}, {| result | nums[i]|});
	}


	for(int i=0; i<N; i++)
	 assert result % nums[i] == 0;
	
	for(int i=1; i < result; i++)
	 {
	  bit divisible = 1;
	  for(int j=0; j<N; j++)
             divisible = divisible && (i % nums[j] == 0);
          assert !divisible;
	 }
}