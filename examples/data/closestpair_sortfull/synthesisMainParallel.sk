pragma options "--bnd-inline-amnt 5 --bnd-inbits 3 --bnd-cbits 3 --bnd-unroll-amnt 8 --slv-nativeints --slv-parallel --slv-p-cpus 4 --slv-randassign --slv-randdegree 5";
int N =5;

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::sort_proxy_real") n_unknowns}};
int sort_proxy_index(int i0, int i1, int i2, int i3, int i4);
int idx = 0;
int[cap] i_0_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 0 "??" n_unknowns}} };
int[cap] i_1_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 1 "??" n_unknowns}} };
int[cap] i_2_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 2 "??" n_unknowns}} };
int[cap] i_3_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 3 "??" n_unknowns}} };
int[cap] i_4_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 4 "??" n_unknowns}} };
int[cap] r_0_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 0 "??" n_unknowns}} };
int[cap] r_1_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 1 "??" n_unknowns}} };
int[cap] r_2_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 2 "??" n_unknowns}} };
int[cap] r_3_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 3 "??" n_unknowns}} };
int[cap] r_4_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 4 "??" n_unknowns}} };

generator int[N] sort(int[N] input){
    return sort_proxy(input[0],input[1],input[2],input[3],input[4]);
}

generator int[N] sort_proxy(int input_0,int input_1,int input_2,int input_3,int input_4) {
	idx = sort_proxy_index(input_0, input_1, input_2, input_3, input_4);
	assume 0 <= idx && idx < cap && i_0_arr[idx] == input_0 && i_1_arr[idx] == input_1 && i_2_arr[idx] == input_2 && i_3_arr[idx] == input_3 && i_4_arr[idx] == input_4;
	return sort_proxy_real(input_0, input_1, input_2, input_3, input_4);
}

int[N] sort_proxy_real(int input_0,int input_1,int input_2,int input_3,int input_4) {
	return { r_0_arr[idx], r_1_arr[idx], r_2_arr[idx], r_3_arr[idx], r_4_arr[idx] };
}

harness void sanity_check(int idx1, int idx2) {
    assume 0 <= idx1 && idx1 < cap;
    assume 0 <= idx2 && idx2 < cap;
    assume idx1 != idx2;
	assert i_0_arr[idx1] != i_0_arr[idx2] || i_1_arr[idx1] != i_1_arr[idx2] || i_2_arr[idx1] != i_2_arr[idx2] || i_3_arr[idx1] != i_3_arr[idx2] || i_4_arr[idx1] != i_4_arr[idx2];
}

generator int abs(int x){
	if(x<0) return -x;
	else return x;
}
generator int min(int x,int y){
	if(x < y) return x;
	else return y;
}

harness void main(int arr_0,int arr_1,int arr_2,int arr_3,int arr_4){//find closest pair distance in arr
    {{expand-x-d-points-to-assume c_e_s "arr_0" "arr_1" "arr_2" "arr_3" "arr_4"}}
    int[N] arr = {arr_0,arr_1,arr_2,arr_3,arr_4};
	if(N<2) return;
	int currmin = abs(arr[1] - arr[0]);
	for(int i=0;i<N;++i){
		for(int j=i+1;j<N;++j){
			currmin = min(abs(arr[j]-arr[i]),currmin);
		}
	}
	
	int[N] sarr = sort(arr);

	int currmin2 = sarr[??]-sarr[??];
	for(int i=??;{|i  (< | <= | > | >=) (??*N (+ | -) ??) |};i={| i (+|-) ??|}){
		currmin2 = min(sarr[{| i (+|-) ??|}] - sarr[i],currmin2);
	}
	assert(currmin == currmin2);
}