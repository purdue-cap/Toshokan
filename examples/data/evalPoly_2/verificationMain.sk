pragma options "--bnd-inbits 3 --bnd-inline-amnt 2 --bnd-unroll-amnt 8 --bnd-cbits 3 --slv-nativeints";

int N = 4;

int pow(int a, int b){
    if (a > 1 && b < 0) {
        return 0;
    }
    int result = 1;
    for(int i=0; i<b; i++)
       result = result * a;
    return result;
}

generator int expr() {
    if (??) {
        return expr() * expr();
    }
    if (??) {
        return expr() + expr();
    }
    if (??) {
        return expr() - expr();
    }
    return {| (N| ??) |};
}

harness void main(int p_0, int p_1, int p_2, int p_3, int x) {

    int[N] p = {p_0, p_1, p_2, p_3};

    int num = 0;
    int i = expr();
    while (i < N) {
        num += p[i] * pow(x, i);
        i = i + 1;
    }

    int ref_num = 0;
    for (int j=0; j < N; j++){
        ref_num += p[j] * pow(x, j);
    }

    assert num == ref_num;
}