pragma options "--bnd-inbits 5 --bnd-unroll-amnt 5 --bnd-cbits 3 --slv-nativeints";
int K=2;

int cap = {{get-cap-logs logs n_unknowns}};
int logged = {{get-n-logs logs}};
int[cap] iarr = { {{expand-to-arg-array logs 0 n_unknowns}} };
int[cap] rarr = { {{expand-to-rtn-array logs n_unknowns}} };


int[{{n_unknowns}}] unknown = ??;
int used_unknown = 0;

int sqrt(int i){
    for (int idx = 0; idx < logged; idx ++) {
        if (iarr[idx] == i) {
            return rarr[idx];
        }
    }
    int val = unknown[used_unknown];
    used_unknown++;
    if (logged < cap) {
        iarr[logged] = i;
        rarr[logged] = val;
        logged ++;
    }
    return val;
}


int twokroot(int num,int k){
	if(num==0) return 0;
    if (num==1) return 1;
    for(int i=2;i<num;i++){
		int kpow=i;
		for(int j=0;j<k;j++){
			kpow = (kpow*kpow);
			if(kpow > num) return i-1;
		}
		
    }
    return 1;
}


harness void main(int x){//find 2^k th root of x
    {{expand-points-to-assume c_e_s.[0] "x"}}
	//k=0; x=1;
	int k=K;
	if(k==0 || x==0) return;
	
	int val = x;
	for(int i=??;{| i (< | > | <= | >=) {| (??)*k (+|-) (??) |} |};i++){
		if(val != 1 && val != 0){
			val = sqrt(val);
		}
	}
	assert(val !=0);
	assert(val == twokroot(x,k));
}
