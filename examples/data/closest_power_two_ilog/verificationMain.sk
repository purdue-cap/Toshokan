pragma options "--bnd-inbits 4 --bnd-inline-amnt 2 --bnd-unroll-amnt 16 --bnd-cbits 3 ";

int log(int a){
 if(a == 0) return 0;
 for(int i=0; i<a; i++){
  if(pow(2,i)>=a) return i;
 }
}

int pow(int a, int b){
    int result = 1;
    for(int i=0; i<b; i++)
       result = result * a;
    return result;
}

int N = 5;

generator int linexp(int N, int[N] vals){
    int[N+1] t;
    t[0]= (??-2)*vals[0];
    int i=1;
    repeat(N-1){
        t[i] = t[i-1] + (??-2)*vals[i];
        i = i+1;
    }
    return t[i-1];
}

harness void closestTwoPower(int a_0, int a_1, int a_2, int a_3, int a_4){
    int[N] a;
    a[0] = a_0;
    a[1] = a_1;
    a[2] = a_2;
    a[3] = a_3;
    a[4] = a_4;

	int[N] b;
	for(int i=0; i<N; i++){
	if(a[i] == 0) a[i] = 1;
	}

	int result = 0;
	for(int i=0; i<N; i++){
	int exp = log(linexp(2, {a[i], ??}));
	b[i] = linexp(2, {exp, ??});
	// result += pow(2, b[i]);
	}	
	
	for(int i=0; i<N ; i++){
		bit more = true;
		for(int j=0; j<=log(a[i]) + 1; ++j){
			if(pow(2, j)>=a[i] && more){
				   assert b[i] == j; more = false;
		        } 
		}
			
	}
}