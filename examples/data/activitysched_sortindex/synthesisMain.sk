pragma options "--bnd-inline-amnt 1 --bnd-inbits 3 --bnd-cbits 3 --slv-nativeints --bnd-unroll-amnt 4";
int N = 3;

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::sorti_proxy_real") n_unknowns}};
int sorti_proxy_index(int i, int j, int k);
int idx = 0;
int[cap] i_0_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sorti_proxy_real") 0 "??" n_unknowns}} };
int[cap] i_1_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sorti_proxy_real") 1 "??" n_unknowns}} };
int[cap] i_2_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sorti_proxy_real") 2 "??" n_unknowns}} };
int[cap] r_0_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sorti_proxy_real") 0 "??" n_unknowns}} };
int[cap] r_1_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sorti_proxy_real") 1 "??" n_unknowns}} };
int[cap] r_2_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sorti_proxy_real") 2 "??" n_unknowns}} };

generator int[N] sorti(int[N] input){
	return sorti_proxy(input[0], input[1], input[2]);
}

generator int[N] sorti_proxy(int input_0, int input_1, int input_2) {
	idx = sorti_proxy_index(input_0, input_1, input_2);
	assume 0 <= idx && idx < cap && i_0_arr[idx] == input_0 && i_1_arr[idx] == input_1 && i_2_arr[idx] == input_2;
	return sorti_proxy_real(input_0, input_1, input_2);
}

int[N] sorti_proxy_real(int input_0, int input_1, int input_2) {
	return { r_0_arr[idx], r_1_arr[idx], r_2_arr[idx] };
}

harness void sanity_check(int idx1, int idx2) {
    assume 0 <= idx1 && idx1 < cap;
    assume 0 <= idx2 && idx2 < cap;
    assume idx1 != idx2;
	assert i_0_arr[idx1] != i_0_arr[idx2] || i_1_arr[idx1] != i_1_arr[idx2] || i_2_arr[idx1] != i_2_arr[idx2];
}


harness void main(int start_0, int start_1, int start_2, 
                int finish_0, int finish_1, int finish_2,
                int sel_0, int sel_1, int sel_2 ) {
    {{expand-x-d-points-to-assume c_e_s "start_0" "start_1" "start_2" "finish_0" "finish_1" "finish_2" "sel_0" "sel_1" "sel_2" }}
    int[N] start = {start_0, start_1, start_2};
    int[N] finish = {finish_0, finish_1, finish_2};
    bit[N] sel = {sel_0 != 0, sel_1 != 0, sel_2 != 0};

	if(N<2) return;
	if(sel == 0) return;
	for(int i=0;i<N;i++) if(finish[i] >= start[i]) return;

	int[N] si = sorti({|start|finish|});
	int cf = 0;
	int timeb = 0;
	for(int i=0;i<N;i++){
		if(sel[i]){
			if(start[si[i]] < cf) return;
			cf = finish[si[i]];
			timeb = timeb + finish[i] - start[i];
		}
	}
	
	int time =finish[si[??]] - start[si[??]];
	int f = finish[si[??]];
	for(int i=??;{|i  (< | <= | > | >=) N |};i = (??*i+??)){
		if({| start[si[i]] (<|<=|>|>=) f|}){
			time = time + finish[si[i]] - start[si[i]];//linexp(3, {time,finish[si[i]],start[si[i]]});
			f=finish[si[i]];
		}
	}
	assert(timeb >= time);
}
