pragma options "--bnd-inbits 3 --bnd-unroll-amnt 64 --bnd-cbits 3 --slv-nativeints";
int N = 5;

int lcm(int a, int b){
 return a * b / gcd(a,b);
}

int gcd(int a, int b){
if(a==0) return b;
while(b != 0){
 if(a>b) a = a - b;
 else b = b - a;
}
return a;
}

// synthesize algorithm for computing gcd of N numbers
harness void multi_lcm(int[N] nums){
	
	for(int i=0; i<N; i++)
	  if(nums[i] == 0) return;	
	if(N<2) return;        

	int result = lcm(nums[0], nums[1]);
    
    int compare_choice = {{holes.[0]}}%3;
    int compare = 0;
    if (compare_choice == 0) {
        compare = N;
    } else if (compare_choice == 1) {
        compare = N-1;
    } else if (compare_choice == 2) {
        compare = N-2;
    }
    
	for(int i ={{holes.[1]}}; i<compare; i++){
      int arg1;
      int arg2;
      if ({{holes.[2]}}) {
          arg1 = result;
      } else {
          arg1 = nums[i];
      }
      if ({{holes.[3]}}) {
          arg2 = result;
      } else {
          arg2 = nums[i];
      }
	  result = lcm(arg1, arg2);
	}


	for(int i=0; i<N; i++)
	 assert result % nums[i] == 0;
	
	for(int i=1; i < result; i++)
	 {
	  bit divisible = 1;
	  for(int j=0; j<N; j++)
             divisible = divisible && (i % nums[j] == 0);
          assert !divisible;
	 }

}