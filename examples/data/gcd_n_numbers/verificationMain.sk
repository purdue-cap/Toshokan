pragma options "--bnd-inbits 4 --bnd-unroll-amnt 16 --bnd-cbits 3 --slv-nativeints";
int N = 5;

int gcd(int a, int b){
	if(a < b) return gcd(b,a);
	int _gcd=0;
	while (b != 0) {
		_gcd = b;
		b = a % b;
		a = _gcd;
	}
	return _gcd;
}

// synthesize algorithm for computing gcd of N numbers
harness void multi_gcd(int[N] nums){
	
	for(int i=0; i<N; i++)
	  if(nums[i] == 0) return;	
	if(N<2) return;        

	int result = gcd(nums[0], nums[1]);
    
    int compare_choice = {{holes.[0]}}%3;
    int compare = 0;
    if (compare_choice == 0) {
        compare = N;
    } else if (compare_choice == 1) {
        compare = N-1;
    } else if (compare_choice == 2) {
        compare = N-2;
    }
    
	for(int i ={{holes.[1]}}; i<compare; i++){
      int arg1;
      int arg2;
      if ({{holes.[2]}}) {
          arg1 = result;
      } else {
          arg1 = nums[i];
      }
      if ({{holes.[3]}}) {
          arg2 = result;
      } else {
          arg2 = nums[i];
      }
	  result = gcd(arg1, arg2);
	}


	for(int i=0; i<N; i++)
	 assert nums[i] % result== 0;
	
	for(int i=result+1; i <= nums[0]; i++)
	 {
	  bit divisible = 1;
	  for(int j=0; j<N; j++)
             divisible = divisible && (nums[j] %i == 0);
      assert !divisible;
	 }

}