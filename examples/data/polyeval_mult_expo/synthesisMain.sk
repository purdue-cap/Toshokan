pragma options "--bnd-inline-amnt 5 --bnd-inbits 2 --bnd-cbits 2 --bnd-unroll-amnt 16";
int n = 5;
int BASE = 4;
int k=3;

int cap_mult = {{get-cap-logs (subtree logs "ANONYMOUS::mult_proxy_real") n_unknowns}};
int mult_proxy_index(
	{{#each (range 5)}}int x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
	{{#each (range 5)}}int y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
);
int idx_mult = 0;
{{#each (range 5)}}int[cap_mult] x_{{@index}}_mult = { {{expand-to-arg-array (subtree logs "ANONYMOUS::mult_proxy_real") @index "??(4)" n_unknowns}} };
{{/each}}
{{#each (range 5)}}int[cap_mult] y_{{@index}}_mult = { {{expand-to-arg-array (subtree logs "ANONYMOUS::mult_proxy_real") (add @index 5) "??(4)" n_unknowns}} };
{{/each}}
{{#each (range 10)}}int[cap_mult] r_{{@index}}_mult = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::mult_proxy_real") @index "??(4)" n_unknowns}} };
{{/each}}

generator int[2*n] mult_proxy(
	{{#each (range 5)}}int x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
	{{#each (range 5)}}int y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
){
	idx_mult = mult_proxy_index(
		{{#each (range 5)}}x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
		{{#each (range 5)}}y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
	);
	assume 0 <= idx_mult && idx_mult < cap_mult
		{{#each (range 5)}}&& x_{{@index}} == x_{{@index}}_mult[idx_mult]{{/each}}
		{{#each (range 5)}}&& y_{{@index}} == y_{{@index}}_mult[idx_mult]{{/each}};
	return mult_proxy_real(
		{{#each (range 5)}}x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
		{{#each (range 5)}}y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
	);
}

int [2*n] mult_proxy_real (
	{{#each (range 5)}}int x_{{@index}}{{#unless @last}},{{/unless}}{{/each}},
	{{#each (range 5)}}int y_{{@index}}{{#unless @last}},{{/unless}}{{/each}}
) {
	return {
		{{#each (range 10)}}r_{{@index}}_mult[idx_mult]{{#unless @last}},{{/unless}}{{/each}}
	};
}

//derivative computation for a polynomial represented by coefficient list
generator int[2*n] mult(int[n] x, int[n] y){
	return mult_proxy(
		{{#each (range 5)}}x[{{@index}}]{{#unless @last}},{{/unless}}{{/each}},
		{{#each (range 5)}}y[{{@index}}]{{#unless @last}},{{/unless}}{{/each}}
	);
}

int cap_exp = {{get-cap-logs (subtree logs "ANONYMOUS::exp_real") n_unknowns}};
int exp_index(int x, int i);
int idx_exp = 0;
int[cap_exp] x_exp = { {{expand-to-arg-array (subtree logs "ANONYMOUS::exp_real") 0 "??(4)" n_unknowns}} };
int[cap_exp] i_exp = { {{expand-to-arg-array (subtree logs "ANONYMOUS::exp_real") 1 "??(4)" n_unknowns}} };
{{#each (range 5)}}int[cap_exp] r_{{@index}}_exp = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::exp_real") @index "??(4)" n_unknowns}} };
{{/each}}

generator int[n] exp(int x,int i){
	idx_exp = exp_index(x, i);
	assume 0 <= idx_exp && idx_exp < cap_exp && x == x_exp[idx_exp] && i == i_exp[idx_exp];
	return exp_real(x, i);
}

int[n] exp_real(int x, int i) {
	return {
		{{#each (range 5)}}r_{{@index}}_exp[idx_exp]{{#unless @last}},{{/unless}}{{/each}}
	};
}

harness void sanity_check(int idx1, int idx2, int idx3, int idx4) {
    assume 0 <= idx1 && idx1 < cap_mult;
    assume 0 <= idx2 && idx2 < cap_mult;
    assume idx1 != idx2;
	assert 
		{{#each (range 5)}}(x_{{@index}}_mult[idx1] != x_{{@index}}_mult[idx2]){{#unless @last}}||{{/unless}}{{/each}}||
		{{#each (range 5)}}(y_{{@index}}_mult[idx1] != y_{{@index}}_mult[idx2]){{#unless @last}}||{{/unless}}{{/each}};

    assume 0 <= idx3 && idx3 < cap_exp;
    assume 0 <= idx4 && idx4 < cap_exp;
    assume idx3 != idx4;
	assert ( x_exp[idx3] != x_exp[idx4] ) || ( i_exp[idx3] != i_exp[idx4] );
}

int[2*n] plus(int[2*n] x, int[2*n] y){ 
    int[2*n] out = 0;
    for(int i = 0; i<2*n; ++i){
        int tmp = x[i] + y[i] + out[i];
        out[i] = tmp % BASE;
        if(i < 2*n-1){
        	out[i+1] =  tmp / BASE;
        }
    }   
    return out;
}
int[n] toBase(int z){
	//write z in base BASE
	int[n] out =0;
	int sum =z;
	for (int i=0;i<n;i++){
		out[i] = sum % BASE;
		sum = sum/BASE;
	}
	return out;
}


harness void main(
    int p_0_0, int p_1_0, int p_2_0, int p_0_1, int p_1_1, int p_2_1, int p_0_2, int p_1_2, int p_2_2, int p_0_3, int p_1_3, int p_2_3, int p_0_4, int p_1_4, int p_2_4,
    int x){

	{{expand-x-d-points-to-assume c_e_s "p_0_0" "p_1_0" "p_2_0" "p_0_1" "p_1_1" "p_2_1" "p_0_2" "p_1_2" "p_2_2" "p_0_3" "p_1_3" "p_2_3" "p_0_4" "p_1_4" "p_2_4" "x"}}

    int[n][k] p = { { p_0_0, p_0_1, p_0_2, p_0_3, p_0_4 }, { p_1_0, p_1_1, p_1_2, p_1_3, p_1_4 }, { p_2_0, p_2_1, p_2_2, p_2_3, p_2_4 } };
	int[2*n] out1 = 0;
	for(int i=0;i<k;i++){
		out1 = plus(mult(exp(x,i),p[i]),out1);
	}
	int[2*n] out2 = 0;
	for(int i=??;{|i  (< | <= | > | >=) (??*k (+ | -) ??) |};i++){
		out2 = plus(out2,mult(p[{| ??*i (+ | -) ?? |}],exp(x,{| ??*i (+ | -) ?? |})));
	}
	assert(out1 == out2);
}

