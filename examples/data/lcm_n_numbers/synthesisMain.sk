pragma options "--bnd-inbits 3 --bnd-unroll-amnt 128 --bnd-cbits 3 --slv-nativeints";
int N = 5;

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::lcm") n_unknowns}};
int logged = {{get-n-logs (subtree logs "ANONYMOUS::lcm")}};
int[cap] i_0_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::lcm") 0 n_unknowns}} };
int[cap] i_1_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::lcm") 1 n_unknowns}} };
int[cap] rarr = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::lcm") n_unknowns}} };


int[{{n_unknowns}}] unknown = ??;
int used_unknown = 0;

int lcm(int a, int b){
	{{#for-cap-logs (subtree logs "ANONYMOUS::lcm") n_unknowns}}
    if ({{@index}} < logged && i_0_arr[{{@index}}] == a && i_1_arr[{{@index}}] == b) {
        return rarr[{{@index}}];
    }
	{{/for-cap-logs}}

    assert logged < cap;
    int val = unknown[used_unknown];
    used_unknown++;
    i_0_arr[logged] = a;
    i_1_arr[logged] = b;
    rarr[logged] = val;
    logged ++;
    return val;
}

// synthesize algorithm for computing gcd of N numbers
harness void multi_lcm(int nums_0, int nums_1, int nums_2, int nums_3, int nums_4){
    {{expand-x-d-points-to-assume c_e_s "nums_0" "nums_1" "nums_2" "nums_3" "nums_4"}}
    int[N] nums;
    nums[0] = nums_0;
    nums[1] = nums_1;
    nums[2] = nums_2;
    nums[3] = nums_3;
    nums[4] = nums_4;
	
	for(int i=0; i<N; i++)
	  if(nums[i] == 0) return;	
	if(N<2) return;        

	int result = lcm(nums[0], nums[1]);
	for(int i =??; i<{| N | N-1 | N-2 |}; i++){
	  result = lcm({| result | nums[i]|}, {| result | nums[i]|});
	}


	for(int i=0; i<N; i++)
	 assert result % nums[i] == 0;
	
	for(int i=1; i < result; i++)
	 {
	  bit divisible = 1;
	  for(int j=0; j<N; j++)
             divisible = divisible && (i % nums[j] == 0);
          assert !divisible;
	 }
}