package DefaultCipherFactory {

Object DefaultCipherFactory_DefaultCipherFactory(Object self) {
  self.ALGORITHM_DefaultCipherFactory = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=3+1, A="AES"), 0, 3);
  self.PADDING_DefaultCipherFactory = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=20+1, A="AES/ECB/PKCS5Padding"), 0, 20);
  self.algorithm_DefaultCipherFactory = self.ALGORITHM_DefaultCipherFactory;
  self.padding_DefaultCipherFactory = self.PADDING_DefaultCipherFactory;
  self.key_DefaultCipherFactory = String_String_char_int_int(new Object(__cid=String()), new Array_char(length=3+1, A="KEY"), 0, 3);
  return self;
}

Object encryptionCipher(Object self) {
  return initCipher_int@DefaultCipherFactory(self, 1);
}

Object decryptionCipher(Object self) {
  return initCipher_int@DefaultCipherFactory(self, 2);
}

Object initCipher_int(Object self, int mode) {
  Object cipher;
  cipher = obtainCipher_int@DefaultCipherFactory(self, mode);
  return cipher;
}

Object obtainCipher_int(Object self, int mode) {
  Object secretKeySpec = SecretKeySpec_SecretKeySpec_byte_String(new Object(__cid=SecretKeySpec()), key@DefaultCipherFactory(self), getAlgorithm@DefaultCipherFactory(self));
  Object cipher = getInstance_String@Cipher(getPadding@DefaultCipherFactory(self));
  if (cipher.__cid == Cipher()) { init_int_Key@Cipher(cipher, mode, secretKeySpec); }
  else { 0; };
  return cipher;
}

Array_char key(Object self) {
  Object k = getKey@DefaultCipherFactory(self);
  return (k.__cid == String() ? getBytes@String(k) : null);
}

Object getAlgorithm(Object self) {
  return self.algorithm_DefaultCipherFactory;
}

Object getPadding(Object self) {
  return self.padding_DefaultCipherFactory;
}

Object getKey(Object self) {
  return self.key_DefaultCipherFactory;
}

void setKey_String(Object self, Object key) {
  self.key_DefaultCipherFactory = key;
}

bit isKeyBase64(Object self) {
  return self.keyBase64_DefaultCipherFactory;
}

void setKeyBase64_boolean(Object self, bit keyBase64) {
  self.keyBase64_DefaultCipherFactory = keyBase64;
}

}
