pragma options "--bnd-inline-amnt 5 --bnd-inbits 3 --bnd-cbits 3 --bnd-unroll-amnt 16 --slv-parallel --slv-p-cpus 4 --slv-randassign --slv-randdegree 5";
int N =5;

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::sort_proxy_real") n_unknowns}};
int sort_proxy_index(int i0, int i1, int i2, int i3, int i4);
int idx = 0;
int[cap] i_0_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 0 "??" n_unknowns}} };
int[cap] i_1_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 1 "??" n_unknowns}} };
int[cap] i_2_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 2 "??" n_unknowns}} };
int[cap] i_3_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 3 "??" n_unknowns}} };
int[cap] i_4_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sort_proxy_real") 4 "??" n_unknowns}} };
int[cap] r_0_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 0 "??" n_unknowns}} };
int[cap] r_1_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 1 "??" n_unknowns}} };
int[cap] r_2_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 2 "??" n_unknowns}} };
int[cap] r_3_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 3 "??" n_unknowns}} };
int[cap] r_4_arr = { {{expand-to-ith-rtn-array (subtree logs "ANONYMOUS::sort_proxy_real") 4 "??" n_unknowns}} };

generator int[N] sort(int[N] input){
    return sort_proxy(input[0],input[1],input[2],input[3],input[4]);
}

generator int[N] sort_proxy(int input_0,int input_1,int input_2,int input_3,int input_4) {
	idx = sort_proxy_index(input_0, input_1, input_2, input_3, input_4);
	assume 0 <= idx && idx < cap && i_0_arr[idx] == input_0 && i_1_arr[idx] == input_1 && i_2_arr[idx] == input_2 && i_3_arr[idx] == input_3 && i_4_arr[idx] == input_4;
	return sort_proxy_real(input_0, input_1, input_2, input_3, input_4);
}

int[N] sort_proxy_real(int input_0,int input_1,int input_2,int input_3,int input_4) {
	return { r_0_arr[idx], r_1_arr[idx], r_2_arr[idx], r_3_arr[idx], r_4_arr[idx] };
}

harness void sanity_check(int idx1, int idx2) {
    assume 0 <= idx1 && idx1 < cap;
    assume 0 <= idx2 && idx2 < cap;
    assume idx1 != idx2;
	assert i_0_arr[idx1] != i_0_arr[idx2] || i_1_arr[idx1] != i_1_arr[idx2] || i_2_arr[idx1] != i_2_arr[idx2] || i_3_arr[idx1] != i_3_arr[idx2] || i_4_arr[idx1] != i_4_arr[idx2];
}

int linear_search(int[N] arr,int x){
	for(int i=0;i<N;i++){
		if(arr[i] == x) return i;
	}
	return -1;
}
harness void main(int arr_0,int arr_1,int arr_2,int arr_3,int arr_4,int x){//search for x in arr
    {{expand-x-d-points-to-assume c_e_s "arr_0" "arr_1" "arr_2" "arr_3" "arr_4" "x"}}
    int[N] arr = {arr_0,arr_1,arr_2,arr_3,arr_4};
	int[N] sarr = sort(arr);
	//assert(sarr[0] <= sarr[N-1]);
	int exists = linear_search(sarr,x);
	int imin =0;
	int imax= N - 1;
	int found = -1;
	while (found == -1 && {| (imin | N | imax) ( < | <= | > |>=) (imin | N | imax) |})
	//while (imax >= imin && found == -1)
    {
	  	int imid = (imin + imax)/2;
		if(sarr[imid] <  x){
			if(??)
				imin = {| (imin | N | imax | imid) ( + | -) ?? |};
			else
				imax = {| (imin | N | imax | imid) ( + | -) ?? |};
		}
		else if (sarr[imid] > x){
			if(??)
				imin = {| (imin | N | imax | imid) ( + | -) ?? |};
			else
				imax = {| (imin | N | imax | imid) ( + | -) ?? |};
		}
		else
			found = imid;
			
    }
    if(exists == -1) 
    	assert(found == -1);
	else
		assert(sarr[exists] == sarr[found] && sarr[found] == x);
}