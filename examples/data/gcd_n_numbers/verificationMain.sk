pragma options "--bnd-inbits 4 --bnd-unroll-amnt 16 --bnd-cbits 3 --slv-nativeints";
int N = 5;

int gcd(int a, int b){
	if(a < b) return gcd(b,a);
	int _gcd=0;
	while (b != 0) {
		_gcd = b;
		b = a % b;
		a = _gcd;
	}
	return _gcd;
}

// synthesize algorithm for computing gcd of N numbers
harness void multi_gcd(int nums_0, int nums_1, int nums_2, int nums_3, int nums_4){
    int[N] nums;
    nums[0] = nums_0;
    nums[1] = nums_1;
    nums[2] = nums_2;
    nums[3] = nums_3;
    nums[4] = nums_4;
	
	for(int i=0; i<N; i++)
	  if(nums[i] == 0) return;	
	if(N<2) return;        

	int result = gcd(nums[0], nums[1]);
	for(int i =??; i<{| N | N-1 | N-2 |}; i++){
	  result = gcd({| result | nums[i]|}, {| result | nums[i]|});
	}


	for(int i=0; i<N; i++)
	 assert nums[i] % result== 0;
	
	for(int i=result+1; i <= nums[0]; i++)
	 {
	  bit divisible = 1;
	  for(int j=0; j<N; j++)
             divisible = divisible && (nums[j] %i == 0);
      assert !divisible;
	 }

}