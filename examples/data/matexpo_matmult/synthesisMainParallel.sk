pragma options "--bnd-inbits 3 --bnd-unroll-amnt 8 --bnd-cbits 3  --slv-parallel --slv-p-cpus 4 --slv-randassign --slv-randdegree 5";
int n =2;
int gk =3;
int BASE = 5;
struct mat{
    int R_0_0;
    int R_0_1;
    int R_1_0;
    int R_1_1;
	int k;
}

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::matmul") n_unknowns}};
int logged = {{get-n-logs (subtree logs "ANONYMOUS::matmul")}};
mat[cap] i_0_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::matmul") 0 true n_unknowns}} };
mat[cap] i_1_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::matmul") 1 true n_unknowns}} };
mat[cap] rarr = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::matmul") true n_unknowns}} };


mat[{{n_unknowns}}] unknown = { {{expand-holes n_unknowns}} };
int used_unknown = 0;

bit mat_equals(mat A, mat B) {
	return A.k == B.k &&
			A.R_0_0 == B.R_0_0 &&
			A.R_0_1 == B.R_0_1 &&
			A.R_1_0 == B.R_1_0 &&
			A.R_1_1 == B.R_1_1;
}

mat matmul(mat A,mat B){
	{{#for-cap-logs (subtree logs "ANONYMOUS::matmul") n_unknowns}}
	if ({{@index}} < logged && mat_equals(A, i_0_arr[{{@index}}]) && mat_equals(B, i_1_arr[{{@index}}])) {
		return rarr[{{@index}}];
	}
	{{/for-cap-logs}}

	assert logged < cap;
    mat val = unknown[used_unknown];
    used_unknown++;
	i_0_arr[logged] = A;
	i_1_arr[logged] = B;
	rarr[logged] = val;
	logged ++;
    return val;
}

harness void main(int T_0_0,int T_0_1,int T_1_0,int T_1_1,
    int p_0, int p_1, int p_2) {
    {{expand-x-d-points-to-assume c_e_s "T_0_0" "T_0_1" "T_1_0" "T_1_1" "p_0" "p_1" "p_2" }}

    int [n][n] T = { {T_0_0, T_0_1}, {T_1_0, T_1_1} };
    bit [gk] p = {p_0 != 0, p_1 != 0, p_2 != 0};

	int pval = 0;
	int p2i =1;
	for(int i=0;i<gk;i++){
		if(p[i]) pval = pval + p2i ;
		p2i = p2i *2;
	}

	mat A = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=1);
	mat res = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=0);
	for(int i=0;i<pval;i++){
		res = matmul(res,A);
	}
	
	mat res1 = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=0);
	mat tmp = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=1);//A
	for(int i=??;{| i (< | > | <= | >=) {| (??)*gk (+|-) (??) |} |};i={| i (+|-) ??|} ){
		if(p[i]) res1 = matmul({| res1 | tmp | A |},{| res1 | tmp | A |});
		tmp = matmul({| tmp | A |},{| tmp | A |});
	}

	assert(res1.R_0_0 == res.R_0_0);
	assert(res1.R_0_1 == res.R_0_1);
	assert(res1.R_1_0 == res.R_1_0);
	assert(res1.R_1_1 == res.R_1_1);
	assert(res1.k == res.k);
}