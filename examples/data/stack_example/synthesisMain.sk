pragma options "--bnd-inline-amnt 16 --bnd-inbits 4 --bnd-cbits 4 --bnd-unroll-amnt 16 --slv-nativeints";
int CAP=20;

int HIST_CAP = {{ hist_cap }};
struct Stack {
   int[CAP] storage;
   int pos;
   int[HIST_CAP] _hist;
   int _hist_len;
}

int cap0 = {{get-cap-logs (subtree logs "ANONYMOUS::s_push_real") n_unknowns}};
int s_push_index(int[HIST_CAP] hist);
int idx0 = 0;
int[HIST_CAP][cap0] hist0 = { {{expand-to-hist-arrays (subtree logs "ANONYMOUS::s_push_real") n_unknowns hist_cap}} };
int[cap0] hist0_len = { {{expand-to-hist-lens (subtree logs "ANONYMOUS::s_push_real") n_unknowns }}  };
int[cap0] rarr0 = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::s_push_real") "??" n_unknowns}} };

int cap1 = {{get-cap-logs (subtree logs "ANONYMOUS::s_pop_real") n_unknowns}};
int s_pop_index(int[HIST_CAP] hist);
int idx1 = 0;
int[HIST_CAP][cap1] hist1 = { {{expand-to-hist-arrays (subtree logs "ANONYMOUS::s_pop_real") n_unknowns hist_cap}} };
int[cap1] hist1_len = { {{expand-to-hist-lens (subtree logs "ANONYMOUS::s_pop_real") n_unknowns }}  };
int[cap1] rarr1 = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::s_pop_real") "??" n_unknowns}} };
generator int s_push(Stack s, int i) {
    if (s._hist_len > 0) {
        s._hist[1::s._hist_len] = s._hist[0::s._hist_len];
    }
    s._hist[0] = {{ subtree func_hist_codes "ANONYMOUS::s_push_real" }};
    s._hist[s._hist_len+1] = i;
    s._hist_len = s._hist_len + 2;

	idx0 = s_push_index(s._hist);
	assume 0 <= idx0;
    assume idx0 < cap0;
    assume hist0_len[idx0] == s._hist_len;
    assume hist0[idx0][0::s._hist_len] == s._hist[0::s._hist_len];
    return s_push_real(s, i);
}

int s_push_real(Stack s, int i) {
    return rarr0[idx0];
}

generator int s_pop(Stack s) {
    if (s._hist_len > 0) {
        s._hist[1::s._hist_len] = s._hist[0::s._hist_len];
    }
    s._hist[0] = {{ subtree func_hist_codes "ANONYMOUS::s_pop_real" }};
    s._hist_len = s._hist_len + 1;
    // What if hist_len overflows

	idx1 = s_pop_index(s._hist);
	assume 0 <= idx1;
    assume idx1 < cap1;
    assume hist1_len[idx1] == s._hist_len;
    assume hist1[idx1][0::s._hist_len] == s._hist[0::s._hist_len];
    return s_pop_real(s);
}

int s_pop_real(Stack s) {
    return rarr1[idx1];
}

Stack s_new_real_TRACE_ONLY_(){
    Stack s = new Stack();
    s._hist[0] = {{ subtree func_hist_codes "ANONYMOUS::s_new_real_TRACE_ONLY_" }};
    s._hist_len = 1;
    return s;
}

Stack s_new() {
    return s_new_real_TRACE_ONLY_();
}

harness void sanity_check(int idx1, int idx2, int idx3, int idx4) {
    assume 0 <= idx1 && idx1 < cap0;
    assume 0 <= idx2 && idx2 < cap0;
    assume idx1 != idx2;
    assert hist0_len[idx1] != hist0_len[idx2] || ( hist0_len[idx1] < HIST_CAP && hist0_len[idx1] >= 0 && hist0[idx1][0::hist0_len[idx1]] != hist0[idx2][0::hist0_len[idx1]]);

    assume 0 <= idx3 && idx3 < cap1;
    assume 0 <= idx4 && idx4 < cap1;
    assume idx3 != idx4;
    assert hist1_len[idx3] != hist1_len[idx4] || ( hist1_len[idx3] < HIST_CAP && hist1_len[idx3] >= 0 && hist1[idx3][0::hist1_len[idx3]] != hist1[idx4][0::hist1_len[idx3]]);
}

// Below are original code from benchmark


harness void main(int p, int s, int offset) {
    {{expand-x-d-points-to-assume c_e_s "p" "s" "offset" }}
    Stack st = s_new();
    for (int i = 0; i < p; i++) {
        s_push(st, i * (?? * s + ??) + offset);
    }

    int last_pop = s_pop(st);
    for (int i = 0; i < p - 1; i++) {
        int new_pop = s_pop(st);
        assert new_pop + (s + 1) == last_pop;
        last_pop = new_pop;
    }
}
