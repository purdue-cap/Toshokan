package String {

Object String_String(Object self) {
    return self;
}

Object String_String_char_int_int(Object self, Array_char ca, int offset, int count) {
  if (offset > 0 && offset < ca.length) {
    Array_char tmp = new Array_char(length=count);
    for (int i = 0; i < count; i++) {
      tmp.A[i] = ca.A[i + offset];
    }
    self._value_String = tmp;
  }
  else {
    self._value_String = ca;
  }
  self._count_String = count;
  return self;
}

Object String_String_byte(Object self, Array_char bytes) {
  int len = bytes.length;
  self._value_String = new Array_char(length=len);
  for (int i = 0; i < len; i++) {
    self._value_String.A[i] = (char)(bytes.A[i]);
  }
  self._count_String = len;
  return self;
}

char charAt_int(Object self, int index) {
  if (0 <= index && index < self._count_String) return self._value_String.A[index];
  return '\0';
}

int length(Object self) {
  return self._count_String;
}

Object toString(Object self) {
  return self;
}

void setCharAt_int_char(Object self, int i, char c) {
  self._value_String.A[i] = c;
}

int indexOf_String(Object self, Object s) {
  return indexOf_String_int@String(self, s, 0);
}

int indexOf_String_int(Object self, Object s, int i) {
  int tLen = (self.__cid == String() ? length@String(self) : 0);
  int sLen = (s.__cid == String() ? length@String(s) : 0);
  int index = i;
  int mLen = 0;
  int j;
  if (i >= tLen || i < 0 || sLen == 0) {
    return -1;
  }
  for (j = i; (j < tLen) && (mLen < sLen) && ((j - index) < sLen); ) {
    if ((self.__cid == String() ? charAt_int@String(self, j) : '\0') != (s.__cid == String() ? charAt_int@String(s, j - index) : '\0')) {
      mLen = 0;
      index++;
      j = index;
    }
    else {
      mLen++;
      j++;
    }
  }
  if (mLen != sLen) {
    index = -1;
  }
  return index;
}

int indexOf_char(Object self, char c) {
  return indexOf_char_int@String(self, c, 0);
}

int indexOf_char_int(Object self, char c, int i) {
  int len = (self.__cid == String() ? length@String(self) : 0);
  int index = -1;
  if (i >= len || i < 0) {
    return index;
  }
  for (int j = i; j < len; j++) {
    if ((self.__cid == String() ? charAt_int@String(self, j) : '\0') == c) {
      return j;
    }
  }
  return index;
}

int compareTo_String(Object self, Object str) {
  return compare_String_String((self.__cid == String() ? toString@String(self) : null), str);
}

int compare_String_String(Object s1, Object s2) {
  int l1 = (s1.__cid == String() ? length@String(s1) : 0);
  int l2 = (s2.__cid == String() ? length@String(s2) : 0);
  int lendiff = l1 - l2;
  int smaller = l1;
  if (l1 > l2) {
    smaller = l2;
  }
  else {
    for (int i = 0; i < smaller; i++) {
      char c1 = (s1.__cid == String() ? charAt_int@String(s1, i) : '\0');
      char c2 = (s2.__cid == String() ? charAt_int@String(s2, i) : '\0');
      if (c1 != c2) {
        return c1 - c2;
      }
    }
    if (lendiff != 0) return lendiff;
    return 0;
  }
}

Object concat_String(Object self, Object str) {
  int otherLen = (str.__cid == String() ? length@String(str) : 0);
  if (otherLen == 0) {
    return self;
  }
  int thisLen = (self.__cid == String() ? length@String(self) : 0);
  int totalLen = (self.__cid == String() ? length@String(self) : 0) + otherLen;
  Array_char ret = new Array_char(length=totalLen);
  for (int i = 0; i < thisLen; i++) {
    ret.A[i] = (self.__cid == String() ? charAt_int@String(self, i) : '\0');
  }
  for (int i = thisLen; i < totalLen; i++) {
    ret.A[i] = (str.__cid == String() ? charAt_int@String(str, i - thisLen) : '\0');
  }
  return String_String_char_int_int(new Object(__cid=String()), ret, 0, totalLen);
}

bit equalsIgnoreCase_Object(Object self, Object obj) {
  return equals_Object@String(self, obj);
}

bit equals_Object(Object self, Object obj) {
  bit isEqual = false;
  if (obj.__cid == String()) {
    isEqual = true;
    Object s = obj;
    int sLen = (s.__cid == String() ? length@String(s) : 0);
    int tLen = (self.__cid == String() ? length@String(self) : 0);
    if (sLen != tLen) isEqual = false;
    for (int i = 0; (i < sLen) && (isEqual == true); i++) {
      if (s._value_String.A[i] != self._value_String.A[i]) {
        isEqual = false;
      }
    }
  }
  return isEqual;
}

int hashCode(Object self) {
  int n = self._count_String,  hash = 0,  temp = 0;
  if (n == 0) {
    return 0;
  }
  for (int i = 0; i < n; i++) {
    temp = (self.__cid == String() ? charAt_int@String(self, i) : '\0');
    for (int j = 0; j < n - 1 - i; j++) {
      temp = temp * 31;
    }
    hash = hash + temp;
  }
  return hash;
}

Object replace_char_char(Object self, char oldChar, char newChar) {
  if (oldChar != newChar) {
    int len = self._count_String;
    int i = -1;
    int stop = 0;
    Array_char val = self._value_String;
    while (i < len) {
      i = i + 1;
      if (val.A[i] == oldChar && stop == 0) {
        stop = i;
      }
    }
    if (stop < len) {
      Array_char buf = new Array_char(length=len);
      for (int j = 0; j < stop; j++) {
        buf.A[j] = val.A[j];
      }
      while (stop < len) {
        char c = val.A[stop];
        buf.A[stop] = ((c == oldChar) ? newChar : c);
        stop++;
      }
      return String_String_char_int_int(new Object(__cid=String()), buf, 0, len);
    }
  }
  return self;
}

Array_char getBytes(Object self) {
  return getBytes_String((self.__cid == String() ? toString@String(self) : null));
}

Array_char getBytes_String(Object str) {
  int len = (str.__cid == String() ? length@String(str) : 0);
  Array_char bytes = new Array_char(length=len);
  for (int i = 0; i < len; i++) {
    bytes.A[i] = (char)((str.__cid == String() ? charAt_int@String(str, i) : '\0'));
  }
  return bytes;
}

Object substring_int(Object self, int beginIndex) {
  int subLen = self._count_String - beginIndex;
  assert subLen > 0;
  return ((beginIndex == 0) ? self : String_String_char_int_int(new Object(__cid=String()), self._value_String, beginIndex, subLen));
}

Object substring_int_int(Object self, int beginIndex, int endIndex) {
  assert beginIndex >= 0 && endIndex <= self._value_String.length;
  int subLen = endIndex - beginIndex;
  assert subLen > 0;
  return ((beginIndex == 0 && endIndex == self._count_String) ? self : String_String_char_int_int(new Object(__cid=String()), self._value_String, beginIndex, subLen));
}

}
