pragma options "{{#each synthesis_sketch_options}}{{this}} {{/each}}";

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::sqrt_real") n_unknowns}};
int sqrt_index(int i);
int idx = 0;
int[cap] iarr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::sqrt_real") 0 "??(5)" n_unknowns}} };
int[cap] rarr = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::sqrt_real") "??(5)" n_unknowns}} };


generator int sqrt(int i){
	idx = sqrt_index(i);
	assume 0 <= idx && idx < cap && iarr[idx] == i;
    return sqrt_real(i);
}

int sqrt_real(int i) {
	return rarr[idx];
}

harness void sanity_check(int idx1, int idx2) {
    assume 0 <= idx1 && idx1 < cap;
    assume 0 <= idx2 && idx2 < cap;
    assume idx1 != idx2;
    assert iarr[idx1] != iarr[idx2];
} 

generator bit primality(int p) {
	if(p<=1) return 0;
	if(p==2) return 1;
    
	int temp = sqrt({| (??%2)*p (+|-) (??%2) |});
	
	for(int i=2;{| i (< | > | <= | >=) temp |};i++){
		if(p%i == 0) return 0;
	}
	return 1;
}

bit primality_spec(int p){
	if(p<=1) return 0;
	if(p==2) return 1;
	for(int i=2;i<p;i++){
		if(p%i == 0) return 0;
	}
	return 1;
}

harness void main(int p) {
    {{expand-points-to-assume c_e_s.[0] "p"}}
    assert primality(p) == primality_spec(p);
}
