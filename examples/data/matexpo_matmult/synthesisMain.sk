pragma options "--bnd-inbits 3 --bnd-unroll-amnt 8 --bnd-cbits 3 ";
int n =2;
int gk =3;
int BASE = 5;
struct mat{
    int R_0_0;
    int R_0_1;
    int R_1_0;
    int R_1_1;
	int k;
}

int cap = {{get-cap-logs (subtree logs "ANONYMOUS::matmul_real") n_unknowns}};
int matmul_index(mat arg1, mat arg2);
int idx = 0;
mat[cap] i_0_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::matmul_real") 0 "??" n_unknowns}} };
mat[cap] i_1_arr = { {{expand-to-arg-array (subtree logs "ANONYMOUS::matmul_real") 1 "??" n_unknowns}} };
mat[cap] rarr = { {{expand-to-rtn-array (subtree logs "ANONYMOUS::matmul_real") "??" n_unknowns}} };

bit mat_equals(mat A, mat B) {
	return A.k == B.k &&
			A.R_0_0 == B.R_0_0 &&
			A.R_0_1 == B.R_0_1 &&
			A.R_1_0 == B.R_1_0 &&
			A.R_1_1 == B.R_1_1;
}


generator mat matmul(mat A,mat B){
	idx = matmul_index(A, B);
	assume 0 <= idx && idx < cap && mat_equals(A, i_0_arr[idx]) && mat_equals(B, i_1_arr[idx]);
	return matmul_real(A, B);
}

mat matmul_real(mat A,mat B){
	return rarr[idx];
}

harness void sanity_check(int idx1, int idx2) {
    assume 0 <= idx1 && idx1 < cap;
    assume 0 <= idx2 && idx2 < cap;
    assume idx1 != idx2;
    assert (! mat_equals(i_0_arr[idx1], i_0_arr[idx2])) || (! mat_equals(i_1_arr[idx1], i_1_arr[idx2]));
}


harness void main(int T_0_0,int T_0_1,int T_1_0,int T_1_1,
    int p_0, int p_1, int p_2) {
    {{expand-x-d-points-to-assume c_e_s "T_0_0" "T_0_1" "T_1_0" "T_1_1" "p_0" "p_1" "p_2" }}

    int [n][n] T = { {T_0_0, T_0_1}, {T_1_0, T_1_1} };
    bit [gk] p = {p_0 != 0, p_1 != 0, p_2 != 0};

	int pval = 0;
	int p2i =1;
	for(int i=0;i<gk;i++){
		if(p[i]) pval = pval + p2i ;
		p2i = p2i *2;
	}

	mat A = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=1);
	mat res = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=0);
	for(int i=0;i<pval;i++){
		res = matmul(res,A);
	}
	
	mat res1 = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=0);
	mat tmp = new mat(R_0_0=T[0][0],R_0_1=T[0][1],R_1_0=T[1][0],R_1_1=T[1][1],k=1);//A
	for(int i=??;{| i (< | > | <= | >=) {| (??)*gk (+|-) (??) |} |};i={| i (+|-) ??|} ){
		if(p[i]) res1 = matmul({| res1 | tmp | A |},{| res1 | tmp | A |});
		tmp = matmul({| tmp | A |},{| tmp | A |});
	}

	assert(res1.R_0_0 == res.R_0_0);
	assert(res1.R_0_1 == res.R_0_1);
	assert(res1.R_1_0 == res.R_1_0);
	assert(res1.R_1_1 == res.R_1_1);
	assert(res1.k == res.k);
}