
pragma options "--bnd-inbits 3 --bnd-unroll-amnt 8 --bnd-cbits 3 ";

int sqrt(int num){
    if (num==1) return 1;
    int low=0;
    int mid;//,square;
    int high=1+(num/2);
    while (low+1<high){
        mid=low+(high-low)/2;
        //square=mid*mid;
        if (num %mid == 0 && num/mid == mid)//num == mid*mid
            return mid;
        else if (mid<=num/mid)//mid*mid < num
            low=mid;
        else
            high=mid;
    }
    return low;
}

bit condition(int p, int i) {
    int factor = {{holes.[0]}}%2;
    int addor = {{holes.[1]}}%2;
    int arg;
    if ({{holes.[2]}}) {
        arg = factor*p + addor;
    } else {
        arg = factor*p - addor;
    }
    int rtn = sqrt(arg);

    int comp = {{holes.[3]}}%4;

    if (comp == 0) {
        return i < rtn;
    }
    if (comp == 1) {
        return i > rtn;
    }
    if (comp == 2) {
        return i <= rtn;
    }
    if (comp == 3) {
        return i >= rtn;
    }
    return false;
}

bit primality(int p) {
	if(p<=1) return 0;
	for(int i=2;condition(p, i);i++){
		if(p%i == 0) return 0;
	}
	return 1;
}

bit primality_spec(int p){
	if(p<=1) return 0;
	for(int i=2;i<p;i++){
		if(p%i == 0) return 0;
	}
	return 1;
}

harness void main(int p) {
    assert primality(p) == primality_spec(p);
}
